{"version":3,"sources":["axios.js","components/Row.js","requests.js","components/Banner.js","components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","handleClick","movie","movieTrailer","name","original_title","movieYear","first_air_date","release_date","parseInt","split","console","log","then","url","urlParams","URLSearchParams","URL","search","catch","error","className","map","key","id","onClick","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","movieIndex","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8ab26975.chunk.js","sourcesContent":["import axios from \"axios\";\n\n/** base url to make request to the movie database */\nconst instance = axios.create({\n  baseURL: \"https://cors-anywhere.herokuapp.com/api.themoviedb.org/3\",\n});\n\nexport default instance;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"./../axios\";\nimport \"./../Row.css\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n  // snippet of code which runs based on a specific condition/variable\n  // when row loads, make a GET request to TMDB\n  useEffect(() => {\n    // run once when the row loads\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      //console.log(request.data.results);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1,\n    },\n  };\n\n  // attempt to get the year the movie was released, so we can\n  // pass it in as an arg into movieTrailer() in order to get\n  // better trailer matching validity.\n  const movieYear = (movie) => {\n    let movieYear = \"\";\n    if (movie.first_air_date || movie.release_date) {\n      movieYear = parseInt(\n        (movie?.first_air_date || movie?.release_date).split(\"-\")[0],\n        10\n      );\n    }\n    //console.log(\"movieYear(movie) = \", movieYear);\n    console.log(\"movie\", movie);\n    return movieYear;\n  };\n\n  const handleClick = (movie) => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      // naming is not the same in all genre, so check for name, title, or original title\n      // use the first_air_date as a param and get the year string from it\n      movieTrailer(\n        movie?.name || movie?.title || movie?.original_title || \"\",\n        movieYear(movie)\n      )\n        .then((url) => {\n          const urlParams = new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParams.get(\"v\"));\n        })\n        .catch((error) => console.log(error));\n    }\n  };\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n      <div className=\"row__posters\">\n        {movies.map((movie) => (\n          <img\n            key={movie.id}\n            onClick={() => handleClick(movie)}\n            className={`row__poster ${isLargeRow && \"row__poster_lg\"}`}\n            src={`${base_url}${\n              isLargeRow ? movie.poster_path : movie.backdrop_path\n            }`}\n            alt={movie.name}\n          />\n        ))}\n      </div>\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n    </div>\n  );\n}\n\nexport default Row;\n","const API_KEY = \"a5d1211ab4f4fa975085e66993ff5f03\";\n\nconst requests = {\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n};\n\nexport default requests;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"./../axios\";\nimport requests from \"./../requests\";\nimport \"./../Banner.css\";\n\nfunction Banner() {\n  const [movie, setMovie] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const request = await axios.get(requests.fetchNetflixOriginals);\n      //console.log(\"Banner GET response: \", res);\n      const movieIndex = Math.floor(\n        Math.random() * request.data.results.length - 1\n      );\n      //console.log(\"movieIndex: \", movieIndex);\n      setMovie(request.data.results[movieIndex]);\n      return request;\n    };\n    fetchData();\n  }, []);\n\n  //console.log(movie);\n\n  function truncate(str, n) {\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n  }\n\n  return (\n    <header\n      className=\"banner\"\n      style={{\n        backgroundSize: \"cover\",\n        backgroundImage: `url(\n            \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\n        )`,\n        backgroundPosition: \"center center\",\n      }}\n    >\n      <div className=\"banner__contents\">\n        {/* look for title, name, or original name */}\n        <h1 className=\"banner__title\">\n          {movie?.title || movie?.name || movie?.original_name}\n        </h1>\n        <div className=\"banner__buttons\">\n          <button className=\"banner__button\">Play</button>\n          <button className=\"banner__button\">My List</button>\n        </div>\n        <h1 className=\"banner__description\">\n          {truncate(movie?.overview, 150)}\n        </h1>\n      </div>\n      <div className=\"banner__fadebottom\" />\n    </header>\n  );\n}\n\nexport default Banner;\n","import React, { useState, useEffect } from \"react\";\nimport \"./../Nav.css\";\n\nconst netflix_logo_src_url =\n  \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/1597px-Netflix_2015_logo.svg.png\";\nconst netflix_avatar_src_url =\n  \"https://mir-s3-cdn-cf.behance.net/project_modules/disp/366be133850498.56ba69ac36858.png\";\n\nfunction Nav() {\n  const [show, handleShow] = useState(false);\n  useEffect(() => {\n    window.addEventListener(\"scroll\", () => {\n      handleShow(window.scrollY > 100);\n    });\n    return () => {\n      // cleanup\n      window.removeEventListener(\"scroll\");\n    };\n  }, []);\n\n  return (\n    <div className={`nav ${show && \"nav__black\"}`}>\n      <img\n        className=\"nav__logo\"\n        src={netflix_logo_src_url}\n        alt=\"Netflix Logo\"\n      />\n      <img\n        className=\"nav__avatar\"\n        src={netflix_avatar_src_url}\n        alt=\"Netflix Avatar\"\n      />\n    </div>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport \"./App.css\";\nimport Row from \"./components/Row\";\nimport requests from \"./requests\";\nimport Banner from \"./components/Banner\";\nimport Nav from \"./components/Nav\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Nav />\n      <Banner />\n      <Row\n        title=\"Netflix Originals\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow={true}\n      />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}